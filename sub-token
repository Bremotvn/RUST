use frame_support::{decl_module, decl_storage, decl_event, dispatch::DispatchResult};
use frame_system::ensure_signed;

pub trait Trait: frame_system::Trait {}

decl_storage! {
    trait Store for Module<T: Trait> as TokenModule {
        Tokens: map hasher(blake2_128_concat) T::AccountId => u64;
    }
}

decl_event!(
    pub enum Event<T> where AccountId = <T as frame_system::Trait>::AccountId {
        TokenTransfer(AccountId, AccountId, u64),
    }
);

decl_module! {
    pub struct Module<T: Trait> for enum Call where origin: T::Origin {
        fn transfer_token(origin, to: T::AccountId, amount: u64) -> DispatchResult {
            let from = ensure_signed(origin)?;

            let from_balance = Self::tokens(&from);
            ensure!(from_balance >= amount, "Not enough tokens to transfer");

            let to_balance = Self::tokens(&to);
            let updated_from_balance = from_balance - amount;
            let updated_to_balance = to_balance + amount;

            <Tokens<T>>::insert(&from, updated_from_balance);
            <Tokens<T>>::insert(&to, updated_to_balance);

            Self::deposit_event(RawEvent::TokenTransfer(from, to, amount));

            Ok(())
        }
    }
}
